<?php
/**
 * MUVideo.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUVideo
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * User controller class.
 */
abstract class MUVideo_Controller_Base_AbstractUser extends Zikula_AbstractController
{
    /**
     * Post initialise.
     *
     * Run after construction.
     *
     * @return void
     */
    protected function postInitialize()
    {
        // Set caching to true by default.
        $this->view->setCaching(Zikula_View::CACHE_ENABLED);
    }

    /**
     * This is the default action handling the main area called without defining arguments.
     *
     *
     * @return mixed Output
     */
    public function main()
    {
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'collection', FILTER_SANITIZE_STRING);
        
        $permLevel = ACCESS_OVERVIEW;
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', $permLevel), LogUtil::getErrorMsgPermission());
        
        // redirect to view action
        $redirectUrl = ModUtil::url($this->name, 'user', 'view', array('lct' => 'user'));
        
        return $this->redirect($redirectUrl);
    }

    /**
     * This action provides an item list overview.
     *
     * @param string  $ot           Treated object type
     * @param string  $sort         Sorting field
     * @param string  $sortdir      Sorting direction
     * @param int     $pos          Current pager position
     * @param int     $num          Amount of entries to display
     * @param string  $tpl          Name of alternative template (to be used instead of the default template)
     * @param boolean $raw          Optional way to display a template instead of fetching it (required for standalone output)
     *
     * @return mixed Output
     */
    public function view()
    {
        $controllerHelper = new MUVideo_Util_Controller($this->serviceManager);
        
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'collection', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'view');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        $permLevel = ACCESS_READ;
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel), LogUtil::getErrorMsgPermission());
        
        // redirect to entity controller
        
        System::queryStringSetVar('lct', 'user');
        $this->request->query->set('lct', 'user');
        
        return ModUtil::func($this->name, $objectType, 'view', array('lct' => 'user'));
    }

    /**
     * This action provides a item detail view.
     *
     * @param string  $ot           Treated object type
     * @param int     $id           Identifier of entity to be shown
     * @param string  $tpl          Name of alternative template (to be used instead of the default template)
     * @param boolean $raw          Optional way to display a template instead of fetching it (required for standalone output)
     *
     * @return mixed Output
     */
    public function display()
    {
        $controllerHelper = new MUVideo_Util_Controller($this->serviceManager);
        
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'collection', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'display');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        $permLevel = ACCESS_READ;
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel), LogUtil::getErrorMsgPermission());
        
        // redirect to entity controller
        
        System::queryStringSetVar('lct', 'user');
        $this->request->query->set('lct', 'user');
        
        return ModUtil::func($this->name, $objectType, 'display', array('lct' => 'user'));
    }

    /**
     * This action provides a handling of edit requests.
     *
     * @param string  $ot           Treated object type
     * @param string  $tpl          Name of alternative template (to be used instead of the default template)
     * @param boolean $raw          Optional way to display a template instead of fetching it (required for standalone output)
     *
     * @return mixed Output
     */
    public function edit()
    {
        $controllerHelper = new MUVideo_Util_Controller($this->serviceManager);
        
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'collection', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'edit');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        $permLevel = ACCESS_EDIT;
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel), LogUtil::getErrorMsgPermission());
        
        // redirect to entity controller
        
        System::queryStringSetVar('lct', 'user');
        $this->request->query->set('lct', 'user');
        
        return ModUtil::func($this->name, $objectType, 'edit', array('lct' => 'user'));
    }

    /**
     * This action provides a handling of simple delete requests.
     *
     * @param string  $ot           Treated object type
     * @param int     $id           Identifier of entity to be deleted
     * @param boolean $confirmation Confirm the deletion, else a confirmation page is displayed
     * @param string  $tpl          Name of alternative template (to be used instead of the default template)
     * @param boolean $raw          Optional way to display a template instead of fetching it (required for standalone output)
     *
     * @return mixed Output
     */
    public function delete()
    {
        $controllerHelper = new MUVideo_Util_Controller($this->serviceManager);
        
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'collection', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'delete');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        $permLevel = ACCESS_DELETE;
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel), LogUtil::getErrorMsgPermission());
        
        // redirect to entity controller
        
        System::queryStringSetVar('lct', 'user');
        $this->request->query->set('lct', 'user');
        
        return ModUtil::func($this->name, $objectType, 'delete', array('lct' => 'user'));
    }

}
