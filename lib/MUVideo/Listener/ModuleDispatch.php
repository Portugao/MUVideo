<?php
/**
 * MUVideo.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUVideo
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * Event handler implementation class for dispatching modules.
 */
class MUVideo_Listener_ModuleDispatch extends MUVideo_Listener_Base_AbstractModuleDispatch
{
    /**
     * {@inheritdoc}
     */
    public static function postLoadGeneric(Zikula_Event $event)
    {
        parent::postLoadGeneric($event);
    
        // you can access general data available in the event
        
        // the event name
        // echo 'Event: ' . $event->getName();
        
        // type of current request: MASTER_REQUEST or SUB_REQUEST
        // if a listener should only be active for the master request,
        // be sure to check that at the beginning of your method
        // if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
        //     // don't do anything if it's not the master request
        //     return;
        // }
        
        // kernel instance handling the current request
        // $kernel = $event->getKernel();
        
        // the currently handled request
        // $request = $event->getRequest();
    }
    
    /**
     * {@inheritdoc}
     */
    public static function preExecute(Zikula_Event $event)
    {
        parent::preExecute($event);
    
        // you can access general data available in the event
        
        // the event name
        // echo 'Event: ' . $event->getName();
        
        // type of current request: MASTER_REQUEST or SUB_REQUEST
        // if a listener should only be active for the master request,
        // be sure to check that at the beginning of your method
        // if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
        //     // don't do anything if it's not the master request
        //     return;
        // }
        
        // kernel instance handling the current request
        // $kernel = $event->getKernel();
        
        // the currently handled request
        // $request = $event->getRequest();
    }
    
    /**
     * {@inheritdoc}
     */
    public static function postExecute(Zikula_Event $event)
    {
    	parent::postExecute($event);

		// you can access general data available in the event

		// the event name
		// echo 'Event: ' . $event->getName();

		// type of current request: MASTER_REQUEST or SUB_REQUEST
		// if a listener should only be active for the master request,
		// be sure to check that at the beginning of your method
		// if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
		//     // don't do anything if it's not the master request
		//     return;
		// }

		// kernel instance handling the current request
		// $kernel = $event->getKernel();

		// the currently handled request
		// $request = $event->getRequest();
		
		$isAvailable = ModUtil::available('MUVideo');

		$modargs = $event->getArgs();

		if (in_array($modargs['modname'], array('Admin', 'Theme'))) {
			// nothing to do for module admin and theme
			return;
		}

		if ($modargs['type'] == 'admin') {
			// admin call, thus nothing to do
			return;
		}

		// we are not interested in api functions
		if ($modargs['api'] == 1) {
			return;
		}
		
		// check if MUVideo is activated for any modules
		$modules = MUVideo_Api_User::checkModules();
		if (!is_array($modules) || count($modules) < 1) {
			// no active modules, thus nothing to do
			return;
		} else {
			foreach ($modules as $supportedModule) {
				if($supportedModule != $modargs['modname'] && $modargs['modname'] != 'MUVideo') {
             		return;
				}
			}
		}

		$controllers = array('display');
		
		if ($modargs['modname'] == 'Blocks') {
			$controllers[] = 'getallplacements';
		}

		if($modargs['modname'] == 'Content' || $modargs['modname'] == 'News' || $modargs['modname'] == 'MUVideo') {
			$controllers[] = 'view';		
		}
		
		if ($modargs['modname'] == 'Content') {
			$controllers[] = 'pagelist';
		}
		if ($modargs['modname'] == 'Clip') {
			$controllers[] = 'list';
		}

		if (!in_array($modargs['modfunc'][1], $controllers)) {
			// unallowed controller, thus nothing to do
			return;
		}
		
		// get displayname of $modargs['modname']
		$modArgsModuleId = ModUtil::getIdFromName($modargs['modname']);
		$modArgsModuleArray = ModUtil::getInfo($modArgsModuleId);
		$modargsModule = $modArgsModuleArray['displayname'];	

		$request = new Zikula_Request_Http();
		$module = $request->query->filter('module', 'MUVideo', FILTER_SANITIZE_STRING);
		
		// get displayname of called module
		$moduleId = ModUtil::getIdFromName($module);
		$modArray = ModUtil::getInfo($moduleId);
		$moduleDisplayName = $modArray['displayname'];

		$data = $event->getData();

		// we look for youtube video pattern and replace if found one
		$pattern = "(YOUTUBE)\[([0-9]*)\]";
		$newData = preg_replace_callback("/$pattern/", 			function ($treffer)
			{
				$movieId = $treffer[2];
				$movierepository = MUVideo_Util_Model::getMovieRepository();
				$movie = $movierepository->selectById($movieId);
				if (is_object($movie)) {
					$youtubeUrl = $movie['urlOfYoutube'];
					if ($youtubeUrl != '') {
						$youtubeId = str_replace('https://www.youtube.com/watch?v=', '', $youtubeUrl);
						return '<div class="embed-responsive embed-responsive-16by9"><iframe class="embed-responsive-item" src="https://www.youtube-nocookie.com/embed/' . $youtubeId . '?rel=0" allowfullscreen></iframe></div>';
					} else {
						return '';
					}
				} else {
					return '';
				}
			}, $data);
		
		// we look for youtube video list and replace if found one
		$pattern2 = "(YOUTUBEPLAYLIST)\[([0-9]*)\]";
		$newData2 = preg_replace_callback("/$pattern2/", 			function ($treffer2)
		{
			$playlistId = $treffer2[2];
			$playlistrepository = MUVideo_Util_Model::getPlaylistRepository();
			$playlist = $playlistrepository->selectById($playlistId);
			if (is_object($playlist)) {
				$youtubePlaylistUrl = $playlist['urlOfYoutubePlaylist'];
				if ($youtubePlaylistUrl != '') {
					$youtubeListId = str_replace('https://www.youtube.com/playlist?list=', '', $youtubePlaylistUrl);
					return '<div class="embed-responsive embed-responsive-16by9"><iframe class="embed-responsive-item" src="https://www.youtube-nocookie.com/embed/videoseries?list=' . $youtubeListId . '" allowfullscreen></iframe></div>';
				} else {
					return '';
				}
			} else {
				return '';
			}
		}, $newData);
		$event->setData($newData2);

    }
    
    /**
     * {@inheritdoc}
     */
    public static function customClassname(Zikula_Event $event)
    {
        parent::customClassName($event);
    
        // you can access general data available in the event
        
        // the event name
        // echo 'Event: ' . $event->getName();
        
        // type of current request: MASTER_REQUEST or SUB_REQUEST
        // if a listener should only be active for the master request,
        // be sure to check that at the beginning of your method
        // if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
        //     // don't do anything if it's not the master request
        //     return;
        // }
        
        // kernel instance handling the current request
        // $kernel = $event->getKernel();
        
        // the currently handled request
        // $request = $event->getRequest();
    }
    
    /**
     * {@inheritdoc}
     */
    public static function serviceLinks(Zikula_Event $event)
    {
        parent::customClassName($event);
    
        // Format data like so:
        // $dom = ZLanguage::getModuleDomain('MUVideo');
        // $event->data[] = array('url' => ModUtil::url('MUVideo', 'user', 'main'), 'text' => __('Link text', $dom));
    
        // you can access general data available in the event
        
        // the event name
        // echo 'Event: ' . $event->getName();
        
        // type of current request: MASTER_REQUEST or SUB_REQUEST
        // if a listener should only be active for the master request,
        // be sure to check that at the beginning of your method
        // if ($event->getRequestType() !== HttpKernelInterface::MASTER_REQUEST) {
        //     // don't do anything if it's not the master request
        //     return;
        // }
        
        // kernel instance handling the current request
        // $kernel = $event->getKernel();
        
        // the currently handled request
        // $request = $event->getRequest();
    }
}
