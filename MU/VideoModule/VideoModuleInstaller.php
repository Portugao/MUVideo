<?php
/**
 * Video.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\VideoModule;

use MU\VideoModule\Base\AbstractVideoModuleInstaller;

/**
 * Installer implementation class.
 */
class VideoModuleInstaller extends AbstractVideoModuleInstaller
{
    /**
     * Upgrade the MUVideoModule application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldVersion Version to upgrade from
     *
     * @return boolean True on success, false otherwise
     *
     * @throws RuntimeException Thrown if database tables can not be updated
     */
    public function upgrade($oldVersion)
    {
    
        $logger = $this->container->get('logger');
    
        // Upgrade dependent on old version number
        switch ($oldVersion) {
        		case '1.0.0' :
				// update the database schema
				try {
					DoctrineHelper::updateSchema ( $this->entityManager, $this->listEntityClasses () );
				} catch ( \Exception $e ) {
					if (System::isDevelopmentMode ()) {
						return LogUtil::registerError ( $this->__ ( 'Doctrine Exception: ' ) . $e->getMessage () );
					}
					return LogUtil::registerError ( $this->__f ( 'An error was encountered while updating tables for the %s extension.', array (
							$this->getName () 
					) ) );
				}
				$categoryRegistryIdsPerEntity = array ();
				
				// add default entry for category registry (property named Main)
				include_once 'modules/MUVideo/lib/MUVideo/Api/Base/Category.php';
				include_once 'modules/MUVideo/lib/MUVideo/Api/Category.php';
				$categoryApi = new MUVideo_Api_Category ( $this->serviceManager );
				$categoryGlobal = CategoryUtil::getCategoryByPath ( '/__SYSTEM__/Modules/Global' );
				
				$registryData = array ();
				$registryData ['modname'] = $this->name;
				$registryData ['table'] = 'Collection';
				$registryData ['property'] = $categoryApi->getPrimaryProperty ( array (
						'ot' => 'Collection' 
				) );
				$registryData ['category_id'] = $categoryGlobal ['id'];
				$registryData ['id'] = false;
				if (! DBUtil::insertObject ( $registryData, 'categories_registry' )) {
					LogUtil::registerError ( $this->__f ( 'Error! Could not create a category registry for the %s entity.', array (
							'collection' 
					) ) );
				}
				$categoryRegistryIdsPerEntity ['collection'] = $registryData ['id'];
				
				$registryData = array ();
				$registryData ['modname'] = $this->name;
				$registryData ['table'] = 'Movie';
				$registryData ['property'] = $categoryApi->getPrimaryProperty ( array (
						'ot' => 'Movie' 
				) );
				$registryData ['category_id'] = $categoryGlobal ['id'];
				$registryData ['id'] = false;
				if (! DBUtil::insertObject ( $registryData, 'categories_registry' )) {
					LogUtil::registerError ( $this->__f ( 'Error! Could not create a category registry for the %s entity.', array (
							'movie' 
					) ) );
				}
				$categoryRegistryIdsPerEntity ['movie'] = $registryData ['id'];
				
				// unregister persistent event handlers
				EventUtil::unregisterPersistentModuleHandlers ( $this->name );
				
				// register persistent event handlers
				$this->registerPersistentEventHandlers ();
			
			case '1.1.0' :
				// update the database schema
				try {
					DoctrineHelper::updateSchema ( $this->entityManager, $this->listEntityClasses () );
				} catch ( \Exception $e ) {
					return LogUtil::registerError ( $this->__ ( 'Doctrine Exception' ) . ': ' . $e->getMessage () );
				}
				
				// unregister persistent event handlers
				EventUtil::unregisterPersistentModuleHandlers ( $this->name );
				
				// unregister hook subscriber bundles
				HookUtil::unregisterSubscriberBundles ( $this->version->getHookSubscriberBundles () );
				
                // set up all our vars with initial values
                /*$this->setVar('maxSizeOfMovie', '1024000000');
                $this->setVar('maxSizeOfPoster', '102400');
                $this->setVar('standardPoster', '/images/poster.png');*/ // should get renamed by modvar function below
                // new vars in this version
                $this->setVar('youtubeApi', '');
                $this->setVar('channelIds', '');
                $this->setVar('supportedModules', '');
                $this->setVar('overrideVars', false);
                $this->setVar('collectionEntriesPerPage', '10');
                $this->setVar('linkOwnCollectionsOnAccountPage', true);
                $this->setVar('movieEntriesPerPage', '10');
                $this->setVar('linkOwnMoviesOnAccountPage', true);
                $this->setVar('playlistEntriesPerPage', '10');
                $this->setVar('linkOwnPlaylistsOnAccountPage', true);
                $this->setVar('enableShrinkingForMovieUploadOfMovie', false);
                $this->setVar('shrinkWidthMovieUploadOfMovie', '800');
                $this->setVar('shrinkHeightMovieUploadOfMovie', '600');
                $this->setVar('thumbnailModeMovieUploadOfMovie',  'inset' );
                $this->setVar('thumbnailWidthMovieUploadOfMovieView', '32');
                $this->setVar('thumbnailHeightMovieUploadOfMovieView', '24');
                $this->setVar('thumbnailWidthMovieUploadOfMovieDisplay', '240');
                $this->setVar('thumbnailHeightMovieUploadOfMovieDisplay', '180');
                $this->setVar('thumbnailWidthMovieUploadOfMovieEdit', '240');
                $this->setVar('thumbnailHeightMovieUploadOfMovieEdit', '180');
                $this->setVar('enableShrinkingForMoviePoster', false);
                $this->setVar('shrinkWidthMoviePoster', '800');
                $this->setVar('shrinkHeightMoviePoster', '600');
                $this->setVar('thumbnailModeMoviePoster',  'inset' );
                $this->setVar('thumbnailWidthMoviePosterView', '32');
                $this->setVar('thumbnailHeightMoviePosterView', '24');
                $this->setVar('thumbnailWidthMoviePosterDisplay', '240');
                $this->setVar('thumbnailHeightMoviePosterDisplay', '180');
                $this->setVar('thumbnailWidthMoviePosterEdit', '240');
                $this->setVar('thumbnailHeightMoviePosterEdit', '180');
                $this->setVar('enabledFinderTypes', [ 'collection' ,  'movie' ,  'playlist' ]);
				
				// register persistent event handlers
				$this->registerPersistentEventHandlers ();
				
				// register hook subscriber bundles
				HookUtil::registerSubscriberBundles ( $this->version->getHookSubscriberBundles () );
				
				$currentLanguage = ZLanguage::getLanguageCode();
				
				$config = new \Doctrine\DBAL\Configuration();
				
				//get host, db, user and pw
				$databases = ServiceUtil::getManager()->getArgument('databases');
				$connName = Doctrine_Manager::getInstance()->getCurrentConnection()->getName();
				$host = $databases[$connName]['host'];
				$dbname = $databases[$connName]['dbname'];
				$dbuser = $databases[$connName]['user'];
				$dbpassword = $databases[$connName]['password'];				

				$connectionParams = array(
						'url' => 'pdo_mysql://' . $dbuser .':' . $dbpassword . '@' . $host . '/' . $dbname,
						'driver' => 'pdo_mysql',
						'host' => $host,
						'user' => $dbuser,
						'password' => $dbpassword,
						'dbname' => $dbname, 
				);
				$conn = \Doctrine\DBAL\DriverManager::getConnection($connectionParams, $config);
				
				$collections = $conn->fetchAll('SELECT * FROM muvideo_collection');
				
				if ($collections) {
					$collectionRepository = MUVideo_Util_Model::getCollectionRepository ();
					foreach ( $collections as $collection ) {
						$conn->insert('muvideo_collection_translation', array('locale' => $currentLanguage, 'object_class' => 'MUVideo_Entity_Collection', 'field' => 'title', 'foreign_key' => $collection['id'], 'content' => $collection['title']));
						$conn->insert('muvideo_collection_translation', array('locale' => $currentLanguage, 'object_class' => 'MUVideo_Entity_Collection', 'field' => 'description', 'foreign_key' => $collection['id'], 'content' => $collection['description']));
							
					}
				}
				
				$movies = $conn->fetchAll('SELECT * FROM muvideo_movie');
				if ($movies) {
					$movieRepository = MUVideo_Util_Model::getMovieRepository ();
					foreach ( $movies as $movie ) {
						$conn->insert('muvideo_movie_translation', array('locale' => $currentLanguage, 'object_class' => 'MUVideo_Entity_Movie', 'field' => 'title', 'foreign_key' => $movie['id'], 'content' => $movie['title']));
						$conn->insert('muvideo_movie_translation', array('locale' => $currentLanguage, 'object_class' => 'MUVideo_Entity_Movie', 'field' => 'description', 'foreign_key' => $movie['id'], 'content' => $movie['description']));
						
					}
				}
        }
    
        // Note there are several helpers available for making migrating your extension from Zikula 1.3 to 1.4 easier.
        // The following convenience methods are each responsible for a single aspect of upgrading to Zikula 1.4.x.
    
        // here is a possible usage example
        // of course 1.2.3 should match the number you used for the last stable 1.3.x module version.
         if ($oldVersion = '1.1.0') {
            // rename module for all modvars
            $this->updateModVarsTo14();
            
            // update extension information about this app
            $this->updateExtensionInfoFor14();
            
            // rename existing permission rules
            $this->renamePermissionsFor14();
            
            // rename existing category registries
            $this->renameCategoryRegistriesFor14();
            
            // rename all tables
            $this->renameTablesFor14();
            
            // remove event handler definitions from database
            $this->dropEventHandlersFromDatabase();
            
            // update module name in the hook tables
            $this->updateHookNamesFor14();
            
            // update module name in the workflows table
            $this->updateWorkflowsFor14();
        } 
    
        // remove obsolete persisted hooks from the database
        //$this->hookApi->uninstallSubscriberHooks($this->bundle->getMetaData());
    
    
        // update successful
        return true;
    }
}
