<?php
/**
 * Video.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\VideoModule;

use MU\VideoModule\Base\AbstractVideoModuleInstaller;

/**
 * Installer implementation class.
 */
class VideoModuleInstaller extends AbstractVideoModuleInstaller
{
    /**
     * Upgrade the MUVideoModule application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldVersion Version to upgrade from
     *
     * @return boolean True on success, false otherwise
     *
     * @throws RuntimeException Thrown if database tables can not be updated
     */
    public function upgrade($oldVersion)
    {
    
        $logger = $this->container->get('logger');
    
        // Upgrade dependent on old version number
        switch ($oldVersion) {
        		case '1.0.0' :
				// update the database schema
				try {
					DoctrineHelper::updateSchema ( $this->entityManager, $this->listEntityClasses () );
				} catch ( \Exception $e ) {
					if (System::isDevelopmentMode ()) {
						return LogUtil::registerError ( $this->__ ( 'Doctrine Exception: ' ) . $e->getMessage () );
					}
					return LogUtil::registerError ( $this->__f ( 'An error was encountered while updating tables for the %s extension.', array (
							$this->getName () 
					) ) );
				}
				$categoryRegistryIdsPerEntity = array ();
				
				// add default entry for category registry (property named Main)
				include_once 'modules/MUVideo/lib/MUVideo/Api/Base/Category.php';
				include_once 'modules/MUVideo/lib/MUVideo/Api/Category.php';
				$categoryApi = new MUVideo_Api_Category ( $this->serviceManager );
				$categoryGlobal = CategoryUtil::getCategoryByPath ( '/__SYSTEM__/Modules/Global' );
				
				$registryData = array ();
				$registryData ['modname'] = $this->name;
				$registryData ['table'] = 'Collection';
				$registryData ['property'] = $categoryApi->getPrimaryProperty ( array (
						'ot' => 'Collection' 
				) );
				$registryData ['category_id'] = $categoryGlobal ['id'];
				$registryData ['id'] = false;
				if (! DBUtil::insertObject ( $registryData, 'categories_registry' )) {
					LogUtil::registerError ( $this->__f ( 'Error! Could not create a category registry for the %s entity.', array (
							'collection' 
					) ) );
				}
				$categoryRegistryIdsPerEntity ['collection'] = $registryData ['id'];
				
				$registryData = array ();
				$registryData ['modname'] = $this->name;
				$registryData ['table'] = 'Movie';
				$registryData ['property'] = $categoryApi->getPrimaryProperty ( array (
						'ot' => 'Movie' 
				) );
				$registryData ['category_id'] = $categoryGlobal ['id'];
				$registryData ['id'] = false;
				if (! DBUtil::insertObject ( $registryData, 'categories_registry' )) {
					LogUtil::registerError ( $this->__f ( 'Error! Could not create a category registry for the %s entity.', array (
							'movie' 
					) ) );
				}
				$categoryRegistryIdsPerEntity ['movie'] = $registryData ['id'];
				
				// unregister persistent event handlers
				EventUtil::unregisterPersistentModuleHandlers ( $this->name );
				
				// register persistent event handlers
				$this->registerPersistentEventHandlers ();
			
			case '1.1.0' :
				// update the database schema
                try {
                    $this->schemaTool->update($this->listEntityClasses());
                } catch (\Exception $exception) {
                    $this->addFlash('error', $this->__('Doctrine Exception') . ': ' . $exception->getMessage());
                    $logger->error('{app}: Could not update the database tables during the upgrade. Error details: {errorMessage}.', ['app' => 'MUVideoModule', 'errorMessage' => $exception->getMessage()]);
    
                    return false;
                }
                
                // set default category registry and category for playlists                
                $categoryRegistryIdsPerEntity = [];
                
                // add default entry for category registry (property named Main)
                $categoryHelper = new \MU\VideoModule\Helper\CategoryHelper(
                		$this->container->get('translator.default'),
                		$this->container->get('request_stack'),
                		$logger,
                		$this->container->get('zikula_users_module.current_user'),
                		$this->container->get('zikula_categories_module.category_registry_repository'),
                		$this->container->get('zikula_categories_module.api.category_permission')
                		);
                $categoryGlobal = $this->container->get('zikula_categories_module.category_repository')->findOneBy(['name' => 'Global']);
                $entityManager = $this->container->get('doctrine.orm.default_entity_manager');
                
                $registry = new CategoryRegistryEntity();
                $registry->setModname('MUVideoModule');
                $registry->setEntityname('PlaylistEntity');
                $registry->setProperty($categoryHelper->getPrimaryProperty('Playlist'));
                $registry->setCategory($categoryGlobal);
                
                try {
                	$entityManager->persist($registry);
                	$entityManager->flush();
                } catch (\Exception $exception) {
                	$this->addFlash('error', $this->__f('Error! Could not create a category registry for the %entity% entity.', ['%entity%' => 'playlist']));
                	$logger->error('{app}: User {user} could not create a category registry for {entities} during installation. Error details: {errorMessage}.', ['app' => 'MUVideoModule', 'user' => $userName, 'entities' => 'playlists', 'errorMessage' => $exception->getMessage()]);
                }
                $categoryRegistryIdsPerEntity['playlist'] = $registry->getId();
			
                // set up all our vars with initial values
                /*$this->setVar('maxSizeOfMovie', '1024000000');
                $this->setVar('maxSizeOfPoster', '102400');
                $this->setVar('standardPoster', '/images/poster.png');*/ // should get renamed by modvar function below
                // new vars in this version
                $this->setVar('youtubeApi', '');
                $this->setVar('channelIds', '');
                $this->setVar('overrideVars', false);
                $this->setVar('collectionEntriesPerPage', '10');
                $this->setVar('linkOwnCollectionsOnAccountPage', true);
                $this->setVar('movieEntriesPerPage', '10');
                $this->setVar('linkOwnMoviesOnAccountPage', true);
                $this->setVar('playlistEntriesPerPage', '10');
                $this->setVar('linkOwnPlaylistsOnAccountPage', true);
                $this->setVar('enableShrinkingForMovieUploadOfMovie', false);
                $this->setVar('shrinkWidthMovieUploadOfMovie', '800');
                $this->setVar('shrinkHeightMovieUploadOfMovie', '600');
                $this->setVar('thumbnailModeMovieUploadOfMovie',  'inset' );
                $this->setVar('thumbnailWidthMovieUploadOfMovieView', '32');
                $this->setVar('thumbnailHeightMovieUploadOfMovieView', '24');
                $this->setVar('thumbnailWidthMovieUploadOfMovieDisplay', '240');
                $this->setVar('thumbnailHeightMovieUploadOfMovieDisplay', '180');
                $this->setVar('thumbnailWidthMovieUploadOfMovieEdit', '240');
                $this->setVar('thumbnailHeightMovieUploadOfMovieEdit', '180');
                $this->setVar('enableShrinkingForMoviePoster', false);
                $this->setVar('shrinkWidthMoviePoster', '800');
                $this->setVar('shrinkHeightMoviePoster', '600');
                $this->setVar('thumbnailModeMoviePoster',  'inset' );
                $this->setVar('thumbnailWidthMoviePosterView', '32');
                $this->setVar('thumbnailHeightMoviePosterView', '24');
                $this->setVar('thumbnailWidthMoviePosterDisplay', '240');
                $this->setVar('thumbnailHeightMoviePosterDisplay', '180');
                $this->setVar('thumbnailWidthMoviePosterEdit', '240');
                $this->setVar('thumbnailHeightMoviePosterEdit', '180');
                $this->setVar('enabledFinderTypes', [ 'collection' ,  'movie' ,  'playlist' ]);
				
				// set datas for the current language in the translation table
				// for collections and movies
				$currentLanguage = ZLanguage::getLanguageCode();
				
				$config = new \Doctrine\DBAL\Configuration();
				
				//get host, db, user and pw
				$databases = ServiceUtil::getManager()->getArgument('databases');
				$connName = Doctrine_Manager::getInstance()->getCurrentConnection()->getName();
				$host = $databases[$connName]['host'];
				$dbname = $databases[$connName]['dbname'];
				$dbuser = $databases[$connName]['user'];
				$dbpassword = $databases[$connName]['password'];				

				$connectionParams = array(
						'url' => 'pdo_mysql://' . $dbuser .':' . $dbpassword . '@' . $host . '/' . $dbname,
						'driver' => 'pdo_mysql',
						'host' => $host,
						'user' => $dbuser,
						'password' => $dbpassword,
						'dbname' => $dbname, 
				);
				$conn = \Doctrine\DBAL\DriverManager::getConnection($connectionParams, $config);
				
				// get collection and save datas intó translation table
				$collections = $conn->fetchAll('SELECT * FROM mu_video_collection');			
				if ($collections) {
					$collectionRepository = MUVideo_Util_Model::getCollectionRepository ();
					foreach ( $collections as $collection ) {
						$conn->insert('mu_video_collection_translation', array('locale' => $currentLanguage, 'object_class' => 'MU\VideoModule\Entity\CollectionEntity', 'field' => 'title', 'foreign_key' => $collection['id'], 'content' => $collection['title']));
						$conn->insert('mu_video_collection_translation', array('locale' => $currentLanguage, 'object_class' => 'MU\VideoModule\Entity\CollectionEntity', 'field' => 'description', 'foreign_key' => $collection['id'], 'content' => $collection['description']));
							
					}
				}
				// get movies and save datas intó translation table
				$movies = $conn->fetchAll('SELECT * FROM mu_video_movie');
				if ($movies) {
					$movieRepository = MUVideo_Util_Model::getMovieRepository ();
					foreach ( $movies as $movie ) {
						$conn->insert('mu_video_movie_translation', array('locale' => $currentLanguage, 'object_class' => 'MU\VideoModule\Entity\MovieEntity', 'field' => 'title', 'foreign_key' => $movie['id'], 'content' => $movie['title']));
						$conn->insert('mu_video_movie_translation', array('locale' => $currentLanguage, 'object_class' => 'MU\VideoModule\Entity\MovieEntity', 'field' => 'description', 'foreign_key' => $movie['id'], 'content' => $movie['description']));
						
					}
				}
        }
    
        // Note there are several helpers available for making migrating your extension from Zikula 1.3 to 1.4 easier.
        // The following convenience methods are each responsible for a single aspect of upgrading to Zikula 1.4.x.
    
         if ($oldVersion = '1.1.0') {
            // rename module for all modvars
            $this->updateModVarsTo14();
            
            // update extension information about this app
            $this->updateExtensionInfoFor14();
            
            // rename existing permission rules
            $this->renamePermissionsFor14();
            
            // rename existing category registries
            $this->renameCategoryRegistriesFor14();
            
            // rename all tables
            $this->renameTablesFor14();
            
            // remove event handler definitions from database
            $this->dropEventHandlersFromDatabase();
            
            // update module name in the hook tables
            $this->updateHookNamesFor14();
            
            // update module name in the workflows table
            //$this->updateWorkflowsFor14();
        } 
    
        // remove obsolete persisted hooks from the database
        $this->hookApi->uninstallSubscriberHooks($this->bundle->getMetaData());
  
        // update successful
        return true;
    }
    
    /**
     * Renames the module name for variables in the module_vars table.
     */
    protected function updateModVarsTo14()
    {
    	$conn = $this->getConnection();
    	$conn->update('module_vars', ['modname' => 'MUVideoModule'], ['modname' => 'MUVideo']);
    }
    
    /**
     * Renames this application in the core's extensions table.
     */
    protected function updateExtensionInfoFor14()
    {
    	$conn = $this->getConnection();
    	$conn->update('modules', ['name' => 'MUVideoModule', 'directory' => 'MU/VideoModule'], ['name' => 'MUVideo']);
    }
    
    /**
     * Renames all permission rules stored for this app.
     */
    protected function renamePermissionsFor14()
    {
    	$conn = $this->getConnection();
    	$componentLength = strlen('MUVideo') + 1;
    
    	$conn->executeQuery("
    			UPDATE group_perms
    			SET component = CONCAT('MUVideoModule', SUBSTRING(component, $componentLength))
    			WHERE component LIKE 'MUVideo%';
    			");
    }
    
    /**
     * Renames all category registries stored for this app.
     */
    protected function renameCategoryRegistriesFor14()
    {
    	$conn = $this->getConnection();
    	$componentLength = strlen('MUVideo') + 1;
    
    	$conn->executeQuery("
    			UPDATE categories_registry
    			SET modname = CONCAT('MUVideoModule', SUBSTRING(modname, $componentLength))
    			WHERE modname LIKE 'MUVideo%';
    			");
    }
    
    /**
     * Renames all (existing) tables of this app.
     */
    protected function renameTablesFor14()
    {
    	$conn = $this->getConnection();
    
    	$oldPrefix = 'muvideo_';
    	$oldPrefixLength = strlen($oldPrefix);
    	$newPrefix = 'mu_video_';
    
    	$sm = $conn->getSchemaManager();
    	$tables = $sm->listTables();
    	foreach ($tables as $table) {
    		$tableName = $table->getName();
    		if (substr($tableName, 0, $oldPrefixLength) != $oldPrefix) {
    			continue;
    		}
    
    		$newTableName = str_replace($oldPrefix, $newPrefix, $tableName);
    
    		$conn->executeQuery("
    				RENAME TABLE $tableName
    				TO $newTableName;
    				");
    	}
    }
    
    /**
     * Removes event handlers from database as they are now described by service definitions and managed by dependency injection.
     */
    protected function dropEventHandlersFromDatabase()
    {
    	\EventUtil::unregisterPersistentModuleHandlers('MUVideo');
    }
    
    /**
     * Updates the module name in the hook tables.
     */
    protected function updateHookNamesFor14()
    {
    	$conn = $this->getConnection();
    
    	$conn->update('hook_area', ['owner' => 'MUVideoModule'], ['owner' => 'MUVideo']);
    
    	$componentLength = strlen('subscriber.muvideo') + 1;
    	$conn->executeQuery("
    			UPDATE hook_area
    			SET areaname = CONCAT('subscriber.muvideomodule', SUBSTRING(areaname, $componentLength))
    			WHERE areaname LIKE 'subscriber.muvideo%';
    			");
    
    	$conn->update('hook_binding', ['sowner' => 'MUVideoModule'], ['sowner' => 'MUVideo']);
    
    	$conn->update('hook_runtime', ['sowner' => 'MUVideoModule'], ['sowner' => 'MUVideo']);
    
    	$componentLength = strlen('muvideo') + 1;
    	$conn->executeQuery("
    			UPDATE hook_runtime
    			SET eventname = CONCAT('muvideomodule', SUBSTRING(eventname, $componentLength))
    			WHERE eventname LIKE 'muvideo%';
    			");
    
    	$conn->update('hook_subscriber', ['owner' => 'MUVideoModule'], ['owner' => 'MUVideo']);
    
    	$componentLength = strlen('muvideo') + 1;
    	$conn->executeQuery("
    			UPDATE hook_subscriber
    			SET eventname = CONCAT('muvideomodule', SUBSTRING(eventname, $componentLength))
    			WHERE eventname LIKE 'muvideo%';
    			");
    }
}
