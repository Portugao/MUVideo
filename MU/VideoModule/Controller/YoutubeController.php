<?php
/**
 * Video.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\VideoModule\Controller;

use RuntimeException;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpFoundation\Response;
use MU\VideoModule\Controller\Base\AbstractYoutubeController;

/**
 * Youtube controller implementation class.
 *
 * @Route("/youtube")
 */
class YoutubeController extends AbstractYoutubeController
{
	
	/**
	 * @inheritDoc
	 *
	 * @Route("/getVideos/{collectionId}.{_format}",
	 *        requirements = {"collectionId" = "\d+", "_format" = "html"},
	 *        defaults = {"collectionId" = "0", "_format" = "html"},
	 *        methods = {"GET", "POST"}
	 * )
	 *
	 * @param Request $request Current request instance
	 *
	 * @return Response Output
	 *
	 * @throws AccessDeniedException Thrown if the user doesn't have required permissions
	 * @throws NotFoundHttpException Thrown by form handler if playlist to be edited isn't found
	 * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available)
	 */
    public function getVideosAction(Request $request)
    {
        return parent::getVideosAction($request);
    }
    
    /**
     * This method takes care of the application configuration.
     *
	 * @Route("/getPlaylists/{collectionId}.{_format}",
	 *        requirements = {"collectionId" = "\d+", "_format" = "html"},
	 *        defaults = {"collectionId" = "0", "_format" = "html"},
	 *        methods = {"GET", "POST"}
	 * )
     *
     * @param Request $request Current request instance
     *
     * @return string Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function getPlaylistsAction(Request $request)
    {
    	return parent::getPlaylistsAction($request);
    }

    // feel free to add your own config controller methods here
}
