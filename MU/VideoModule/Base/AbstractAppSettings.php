<?php
/**
 * Video.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\VideoModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use MU\VideoModule\Validator\Constraints as VideoAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $maxSizeOfMovie
     */
    protected $maxSizeOfMovie = '200M';
    
    /**
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $maxSizeOfPoster
     */
    protected $maxSizeOfPoster = '';
    
    /**
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $standardPoster
     */
    protected $standardPoster = '/images/poster.png';
    
    /**
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $youtubeApi
     */
    protected $youtubeApi = '';
    
    /**
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $channelIds
     */
    protected $channelIds = '';
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $overrideVars
     */
    protected $overrideVars = false;
    
    /**
     * The amount of collections shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $collectionEntriesPerPage
     */
    protected $collectionEntriesPerPage = 10;
    
    /**
     * Whether to add a link to collections of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnCollectionsOnAccountPage
     */
    protected $linkOwnCollectionsOnAccountPage = true;
    
    /**
     * The amount of movies shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $movieEntriesPerPage
     */
    protected $movieEntriesPerPage = 10;
    
    /**
     * Whether to add a link to movies of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnMoviesOnAccountPage
     */
    protected $linkOwnMoviesOnAccountPage = true;
    
    /**
     * The amount of playlists shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $playlistEntriesPerPage
     */
    protected $playlistEntriesPerPage = 10;
    
    /**
     * Whether to add a link to playlists of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnPlaylistsOnAccountPage
     */
    protected $linkOwnPlaylistsOnAccountPage = true;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForMoviePoster
     */
    protected $enableShrinkingForMoviePoster = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthMoviePoster
     */
    protected $shrinkWidthMoviePoster = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightMoviePoster
     */
    protected $shrinkHeightMoviePoster = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @VideoAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeMoviePoster", multiple=false)
     * @var string $thumbnailModeMoviePoster
     */
    protected $thumbnailModeMoviePoster = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMoviePosterView
     */
    protected $thumbnailWidthMoviePosterView = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMoviePosterView
     */
    protected $thumbnailHeightMoviePosterView = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMoviePosterDisplay
     */
    protected $thumbnailWidthMoviePosterDisplay = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMoviePosterDisplay
     */
    protected $thumbnailHeightMoviePosterDisplay = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthMoviePosterEdit
     */
    protected $thumbnailWidthMoviePosterEdit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightMoviePosterEdit
     */
    protected $thumbnailHeightMoviePosterEdit = 180;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull()
     * @VideoAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     * @var string $enabledFinderTypes
     */
    protected $enabledFinderTypes = 'collection###movie###playlist';
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi VariableApi service instance
     */
    public function __construct(
        VariableApiInterface $variableApi
    ) {
        $this->variableApi = $variableApi;
    
        $this->load();
    }
    
    /**
     * Returns the max size of movie.
     *
     * @return string
     */
    public function getMaxSizeOfMovie()
    {
        return $this->maxSizeOfMovie;
    }
    
    /**
     * Sets the max size of movie.
     *
     * @param string $maxSizeOfMovie
     *
     * @return void
     */
    public function setMaxSizeOfMovie($maxSizeOfMovie)
    {
        if ($this->maxSizeOfMovie !== $maxSizeOfMovie) {
            $this->maxSizeOfMovie = isset($maxSizeOfMovie) ? $maxSizeOfMovie : '';
        }
    }
    
    /**
     * Returns the max size of poster.
     *
     * @return string
     */
    public function getMaxSizeOfPoster()
    {
        return $this->maxSizeOfPoster;
    }
    
    /**
     * Sets the max size of poster.
     *
     * @param string $maxSizeOfPoster
     *
     * @return void
     */
    public function setMaxSizeOfPoster($maxSizeOfPoster)
    {
        if ($this->maxSizeOfPoster !== $maxSizeOfPoster) {
            $this->maxSizeOfPoster = isset($maxSizeOfPoster) ? $maxSizeOfPoster : '';
        }
    }
    
    /**
     * Returns the standard poster.
     *
     * @return string
     */
    public function getStandardPoster()
    {
        return $this->standardPoster;
    }
    
    /**
     * Sets the standard poster.
     *
     * @param string $standardPoster
     *
     * @return void
     */
    public function setStandardPoster($standardPoster)
    {
        if ($this->standardPoster !== $standardPoster) {
            $this->standardPoster = isset($standardPoster) ? $standardPoster : '';
        }
    }
    
    /**
     * Returns the youtube api.
     *
     * @return string
     */
    public function getYoutubeApi()
    {
        return $this->youtubeApi;
    }
    
    /**
     * Sets the youtube api.
     *
     * @param string $youtubeApi
     *
     * @return void
     */
    public function setYoutubeApi($youtubeApi)
    {
        if ($this->youtubeApi !== $youtubeApi) {
            $this->youtubeApi = isset($youtubeApi) ? $youtubeApi : '';
        }
    }
    
    /**
     * Returns the channel ids.
     *
     * @return string
     */
    public function getChannelIds()
    {
        return $this->channelIds;
    }
    
    /**
     * Sets the channel ids.
     *
     * @param string $channelIds
     *
     * @return void
     */
    public function setChannelIds($channelIds)
    {
        if ($this->channelIds !== $channelIds) {
            $this->channelIds = isset($channelIds) ? $channelIds : '';
        }
    }
    
    /**
     * Returns the override vars.
     *
     * @return boolean
     */
    public function getOverrideVars()
    {
        return $this->overrideVars;
    }
    
    /**
     * Sets the override vars.
     *
     * @param boolean $overrideVars
     *
     * @return void
     */
    public function setOverrideVars($overrideVars)
    {
        if (boolval($this->overrideVars) !== boolval($overrideVars)) {
            $this->overrideVars = boolval($overrideVars);
        }
    }
    
    /**
     * Returns the collection entries per page.
     *
     * @return integer
     */
    public function getCollectionEntriesPerPage()
    {
        return $this->collectionEntriesPerPage;
    }
    
    /**
     * Sets the collection entries per page.
     *
     * @param integer $collectionEntriesPerPage
     *
     * @return void
     */
    public function setCollectionEntriesPerPage($collectionEntriesPerPage)
    {
        if (intval($this->collectionEntriesPerPage) !== intval($collectionEntriesPerPage)) {
            $this->collectionEntriesPerPage = intval($collectionEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own collections on account page.
     *
     * @return boolean
     */
    public function getLinkOwnCollectionsOnAccountPage()
    {
        return $this->linkOwnCollectionsOnAccountPage;
    }
    
    /**
     * Sets the link own collections on account page.
     *
     * @param boolean $linkOwnCollectionsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnCollectionsOnAccountPage($linkOwnCollectionsOnAccountPage)
    {
        if (boolval($this->linkOwnCollectionsOnAccountPage) !== boolval($linkOwnCollectionsOnAccountPage)) {
            $this->linkOwnCollectionsOnAccountPage = boolval($linkOwnCollectionsOnAccountPage);
        }
    }
    
    /**
     * Returns the movie entries per page.
     *
     * @return integer
     */
    public function getMovieEntriesPerPage()
    {
        return $this->movieEntriesPerPage;
    }
    
    /**
     * Sets the movie entries per page.
     *
     * @param integer $movieEntriesPerPage
     *
     * @return void
     */
    public function setMovieEntriesPerPage($movieEntriesPerPage)
    {
        if (intval($this->movieEntriesPerPage) !== intval($movieEntriesPerPage)) {
            $this->movieEntriesPerPage = intval($movieEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own movies on account page.
     *
     * @return boolean
     */
    public function getLinkOwnMoviesOnAccountPage()
    {
        return $this->linkOwnMoviesOnAccountPage;
    }
    
    /**
     * Sets the link own movies on account page.
     *
     * @param boolean $linkOwnMoviesOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnMoviesOnAccountPage($linkOwnMoviesOnAccountPage)
    {
        if (boolval($this->linkOwnMoviesOnAccountPage) !== boolval($linkOwnMoviesOnAccountPage)) {
            $this->linkOwnMoviesOnAccountPage = boolval($linkOwnMoviesOnAccountPage);
        }
    }
    
    /**
     * Returns the playlist entries per page.
     *
     * @return integer
     */
    public function getPlaylistEntriesPerPage()
    {
        return $this->playlistEntriesPerPage;
    }
    
    /**
     * Sets the playlist entries per page.
     *
     * @param integer $playlistEntriesPerPage
     *
     * @return void
     */
    public function setPlaylistEntriesPerPage($playlistEntriesPerPage)
    {
        if (intval($this->playlistEntriesPerPage) !== intval($playlistEntriesPerPage)) {
            $this->playlistEntriesPerPage = intval($playlistEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own playlists on account page.
     *
     * @return boolean
     */
    public function getLinkOwnPlaylistsOnAccountPage()
    {
        return $this->linkOwnPlaylistsOnAccountPage;
    }
    
    /**
     * Sets the link own playlists on account page.
     *
     * @param boolean $linkOwnPlaylistsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnPlaylistsOnAccountPage($linkOwnPlaylistsOnAccountPage)
    {
        if (boolval($this->linkOwnPlaylistsOnAccountPage) !== boolval($linkOwnPlaylistsOnAccountPage)) {
            $this->linkOwnPlaylistsOnAccountPage = boolval($linkOwnPlaylistsOnAccountPage);
        }
    }
    
    /**
     * Returns the enable shrinking for movie poster.
     *
     * @return boolean
     */
    public function getEnableShrinkingForMoviePoster()
    {
        return $this->enableShrinkingForMoviePoster;
    }
    
    /**
     * Sets the enable shrinking for movie poster.
     *
     * @param boolean $enableShrinkingForMoviePoster
     *
     * @return void
     */
    public function setEnableShrinkingForMoviePoster($enableShrinkingForMoviePoster)
    {
        if (boolval($this->enableShrinkingForMoviePoster) !== boolval($enableShrinkingForMoviePoster)) {
            $this->enableShrinkingForMoviePoster = boolval($enableShrinkingForMoviePoster);
        }
    }
    
    /**
     * Returns the shrink width movie poster.
     *
     * @return integer
     */
    public function getShrinkWidthMoviePoster()
    {
        return $this->shrinkWidthMoviePoster;
    }
    
    /**
     * Sets the shrink width movie poster.
     *
     * @param integer $shrinkWidthMoviePoster
     *
     * @return void
     */
    public function setShrinkWidthMoviePoster($shrinkWidthMoviePoster)
    {
        if (intval($this->shrinkWidthMoviePoster) !== intval($shrinkWidthMoviePoster)) {
            $this->shrinkWidthMoviePoster = intval($shrinkWidthMoviePoster);
        }
    }
    
    /**
     * Returns the shrink height movie poster.
     *
     * @return integer
     */
    public function getShrinkHeightMoviePoster()
    {
        return $this->shrinkHeightMoviePoster;
    }
    
    /**
     * Sets the shrink height movie poster.
     *
     * @param integer $shrinkHeightMoviePoster
     *
     * @return void
     */
    public function setShrinkHeightMoviePoster($shrinkHeightMoviePoster)
    {
        if (intval($this->shrinkHeightMoviePoster) !== intval($shrinkHeightMoviePoster)) {
            $this->shrinkHeightMoviePoster = intval($shrinkHeightMoviePoster);
        }
    }
    
    /**
     * Returns the thumbnail mode movie poster.
     *
     * @return string
     */
    public function getThumbnailModeMoviePoster()
    {
        return $this->thumbnailModeMoviePoster;
    }
    
    /**
     * Sets the thumbnail mode movie poster.
     *
     * @param string $thumbnailModeMoviePoster
     *
     * @return void
     */
    public function setThumbnailModeMoviePoster($thumbnailModeMoviePoster)
    {
        if ($this->thumbnailModeMoviePoster !== $thumbnailModeMoviePoster) {
            $this->thumbnailModeMoviePoster = isset($thumbnailModeMoviePoster) ? $thumbnailModeMoviePoster : '';
        }
    }
    
    /**
     * Returns the thumbnail width movie poster view.
     *
     * @return integer
     */
    public function getThumbnailWidthMoviePosterView()
    {
        return $this->thumbnailWidthMoviePosterView;
    }
    
    /**
     * Sets the thumbnail width movie poster view.
     *
     * @param integer $thumbnailWidthMoviePosterView
     *
     * @return void
     */
    public function setThumbnailWidthMoviePosterView($thumbnailWidthMoviePosterView)
    {
        if (intval($this->thumbnailWidthMoviePosterView) !== intval($thumbnailWidthMoviePosterView)) {
            $this->thumbnailWidthMoviePosterView = intval($thumbnailWidthMoviePosterView);
        }
    }
    
    /**
     * Returns the thumbnail height movie poster view.
     *
     * @return integer
     */
    public function getThumbnailHeightMoviePosterView()
    {
        return $this->thumbnailHeightMoviePosterView;
    }
    
    /**
     * Sets the thumbnail height movie poster view.
     *
     * @param integer $thumbnailHeightMoviePosterView
     *
     * @return void
     */
    public function setThumbnailHeightMoviePosterView($thumbnailHeightMoviePosterView)
    {
        if (intval($this->thumbnailHeightMoviePosterView) !== intval($thumbnailHeightMoviePosterView)) {
            $this->thumbnailHeightMoviePosterView = intval($thumbnailHeightMoviePosterView);
        }
    }
    
    /**
     * Returns the thumbnail width movie poster display.
     *
     * @return integer
     */
    public function getThumbnailWidthMoviePosterDisplay()
    {
        return $this->thumbnailWidthMoviePosterDisplay;
    }
    
    /**
     * Sets the thumbnail width movie poster display.
     *
     * @param integer $thumbnailWidthMoviePosterDisplay
     *
     * @return void
     */
    public function setThumbnailWidthMoviePosterDisplay($thumbnailWidthMoviePosterDisplay)
    {
        if (intval($this->thumbnailWidthMoviePosterDisplay) !== intval($thumbnailWidthMoviePosterDisplay)) {
            $this->thumbnailWidthMoviePosterDisplay = intval($thumbnailWidthMoviePosterDisplay);
        }
    }
    
    /**
     * Returns the thumbnail height movie poster display.
     *
     * @return integer
     */
    public function getThumbnailHeightMoviePosterDisplay()
    {
        return $this->thumbnailHeightMoviePosterDisplay;
    }
    
    /**
     * Sets the thumbnail height movie poster display.
     *
     * @param integer $thumbnailHeightMoviePosterDisplay
     *
     * @return void
     */
    public function setThumbnailHeightMoviePosterDisplay($thumbnailHeightMoviePosterDisplay)
    {
        if (intval($this->thumbnailHeightMoviePosterDisplay) !== intval($thumbnailHeightMoviePosterDisplay)) {
            $this->thumbnailHeightMoviePosterDisplay = intval($thumbnailHeightMoviePosterDisplay);
        }
    }
    
    /**
     * Returns the thumbnail width movie poster edit.
     *
     * @return integer
     */
    public function getThumbnailWidthMoviePosterEdit()
    {
        return $this->thumbnailWidthMoviePosterEdit;
    }
    
    /**
     * Sets the thumbnail width movie poster edit.
     *
     * @param integer $thumbnailWidthMoviePosterEdit
     *
     * @return void
     */
    public function setThumbnailWidthMoviePosterEdit($thumbnailWidthMoviePosterEdit)
    {
        if (intval($this->thumbnailWidthMoviePosterEdit) !== intval($thumbnailWidthMoviePosterEdit)) {
            $this->thumbnailWidthMoviePosterEdit = intval($thumbnailWidthMoviePosterEdit);
        }
    }
    
    /**
     * Returns the thumbnail height movie poster edit.
     *
     * @return integer
     */
    public function getThumbnailHeightMoviePosterEdit()
    {
        return $this->thumbnailHeightMoviePosterEdit;
    }
    
    /**
     * Sets the thumbnail height movie poster edit.
     *
     * @param integer $thumbnailHeightMoviePosterEdit
     *
     * @return void
     */
    public function setThumbnailHeightMoviePosterEdit($thumbnailHeightMoviePosterEdit)
    {
        if (intval($this->thumbnailHeightMoviePosterEdit) !== intval($thumbnailHeightMoviePosterEdit)) {
            $this->thumbnailHeightMoviePosterEdit = intval($thumbnailHeightMoviePosterEdit);
        }
    }
    
    /**
     * Returns the enabled finder types.
     *
     * @return string
     */
    public function getEnabledFinderTypes()
    {
        return $this->enabledFinderTypes;
    }
    
    /**
     * Sets the enabled finder types.
     *
     * @param string $enabledFinderTypes
     *
     * @return void
     */
    public function setEnabledFinderTypes($enabledFinderTypes)
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = isset($enabledFinderTypes) ? $enabledFinderTypes : '';
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('MUVideoModule');
    
        if (isset($moduleVars['maxSizeOfMovie'])) {
            $this->setMaxSizeOfMovie($moduleVars['maxSizeOfMovie']);
        }
        if (isset($moduleVars['maxSizeOfPoster'])) {
            $this->setMaxSizeOfPoster($moduleVars['maxSizeOfPoster']);
        }
        if (isset($moduleVars['standardPoster'])) {
            $this->setStandardPoster($moduleVars['standardPoster']);
        }
        if (isset($moduleVars['youtubeApi'])) {
            $this->setYoutubeApi($moduleVars['youtubeApi']);
        }
        if (isset($moduleVars['channelIds'])) {
            $this->setChannelIds($moduleVars['channelIds']);
        }
        if (isset($moduleVars['overrideVars'])) {
            $this->setOverrideVars($moduleVars['overrideVars']);
        }
        if (isset($moduleVars['collectionEntriesPerPage'])) {
            $this->setCollectionEntriesPerPage($moduleVars['collectionEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnCollectionsOnAccountPage'])) {
            $this->setLinkOwnCollectionsOnAccountPage($moduleVars['linkOwnCollectionsOnAccountPage']);
        }
        if (isset($moduleVars['movieEntriesPerPage'])) {
            $this->setMovieEntriesPerPage($moduleVars['movieEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnMoviesOnAccountPage'])) {
            $this->setLinkOwnMoviesOnAccountPage($moduleVars['linkOwnMoviesOnAccountPage']);
        }
        if (isset($moduleVars['playlistEntriesPerPage'])) {
            $this->setPlaylistEntriesPerPage($moduleVars['playlistEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnPlaylistsOnAccountPage'])) {
            $this->setLinkOwnPlaylistsOnAccountPage($moduleVars['linkOwnPlaylistsOnAccountPage']);
        }
        if (isset($moduleVars['enableShrinkingForMoviePoster'])) {
            $this->setEnableShrinkingForMoviePoster($moduleVars['enableShrinkingForMoviePoster']);
        }
        if (isset($moduleVars['shrinkWidthMoviePoster'])) {
            $this->setShrinkWidthMoviePoster($moduleVars['shrinkWidthMoviePoster']);
        }
        if (isset($moduleVars['shrinkHeightMoviePoster'])) {
            $this->setShrinkHeightMoviePoster($moduleVars['shrinkHeightMoviePoster']);
        }
        if (isset($moduleVars['thumbnailModeMoviePoster'])) {
            $this->setThumbnailModeMoviePoster($moduleVars['thumbnailModeMoviePoster']);
        }
        if (isset($moduleVars['thumbnailWidthMoviePosterView'])) {
            $this->setThumbnailWidthMoviePosterView($moduleVars['thumbnailWidthMoviePosterView']);
        }
        if (isset($moduleVars['thumbnailHeightMoviePosterView'])) {
            $this->setThumbnailHeightMoviePosterView($moduleVars['thumbnailHeightMoviePosterView']);
        }
        if (isset($moduleVars['thumbnailWidthMoviePosterDisplay'])) {
            $this->setThumbnailWidthMoviePosterDisplay($moduleVars['thumbnailWidthMoviePosterDisplay']);
        }
        if (isset($moduleVars['thumbnailHeightMoviePosterDisplay'])) {
            $this->setThumbnailHeightMoviePosterDisplay($moduleVars['thumbnailHeightMoviePosterDisplay']);
        }
        if (isset($moduleVars['thumbnailWidthMoviePosterEdit'])) {
            $this->setThumbnailWidthMoviePosterEdit($moduleVars['thumbnailWidthMoviePosterEdit']);
        }
        if (isset($moduleVars['thumbnailHeightMoviePosterEdit'])) {
            $this->setThumbnailHeightMoviePosterEdit($moduleVars['thumbnailHeightMoviePosterEdit']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        $this->variableApi->set('MUVideoModule', 'maxSizeOfMovie', $this->getMaxSizeOfMovie());
        $this->variableApi->set('MUVideoModule', 'maxSizeOfPoster', $this->getMaxSizeOfPoster());
        $this->variableApi->set('MUVideoModule', 'standardPoster', $this->getStandardPoster());
        $this->variableApi->set('MUVideoModule', 'youtubeApi', $this->getYoutubeApi());
        $this->variableApi->set('MUVideoModule', 'channelIds', $this->getChannelIds());
        $this->variableApi->set('MUVideoModule', 'overrideVars', $this->getOverrideVars());
        $this->variableApi->set('MUVideoModule', 'collectionEntriesPerPage', $this->getCollectionEntriesPerPage());
        $this->variableApi->set('MUVideoModule', 'linkOwnCollectionsOnAccountPage', $this->getLinkOwnCollectionsOnAccountPage());
        $this->variableApi->set('MUVideoModule', 'movieEntriesPerPage', $this->getMovieEntriesPerPage());
        $this->variableApi->set('MUVideoModule', 'linkOwnMoviesOnAccountPage', $this->getLinkOwnMoviesOnAccountPage());
        $this->variableApi->set('MUVideoModule', 'playlistEntriesPerPage', $this->getPlaylistEntriesPerPage());
        $this->variableApi->set('MUVideoModule', 'linkOwnPlaylistsOnAccountPage', $this->getLinkOwnPlaylistsOnAccountPage());
        $this->variableApi->set('MUVideoModule', 'enableShrinkingForMoviePoster', $this->getEnableShrinkingForMoviePoster());
        $this->variableApi->set('MUVideoModule', 'shrinkWidthMoviePoster', $this->getShrinkWidthMoviePoster());
        $this->variableApi->set('MUVideoModule', 'shrinkHeightMoviePoster', $this->getShrinkHeightMoviePoster());
        $this->variableApi->set('MUVideoModule', 'thumbnailModeMoviePoster', $this->getThumbnailModeMoviePoster());
        $this->variableApi->set('MUVideoModule', 'thumbnailWidthMoviePosterView', $this->getThumbnailWidthMoviePosterView());
        $this->variableApi->set('MUVideoModule', 'thumbnailHeightMoviePosterView', $this->getThumbnailHeightMoviePosterView());
        $this->variableApi->set('MUVideoModule', 'thumbnailWidthMoviePosterDisplay', $this->getThumbnailWidthMoviePosterDisplay());
        $this->variableApi->set('MUVideoModule', 'thumbnailHeightMoviePosterDisplay', $this->getThumbnailHeightMoviePosterDisplay());
        $this->variableApi->set('MUVideoModule', 'thumbnailWidthMoviePosterEdit', $this->getThumbnailWidthMoviePosterEdit());
        $this->variableApi->set('MUVideoModule', 'thumbnailHeightMoviePosterEdit', $this->getThumbnailHeightMoviePosterEdit());
        $this->variableApi->set('MUVideoModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
