<?php
/**
 * Video.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\VideoModule\TaggedObjectMeta\Base;

use DateTime;
use IntlDateFormatter;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerAwareTrait;
use Zikula\Core\UrlInterface;
use Zikula\TagModule\AbstractTaggedObjectMeta;

/**
 * This class provides object meta data for the Tag module.
 */
abstract class AbstractMUVideoModule extends AbstractTaggedObjectMeta implements ContainerAwareInterface
{
    use ContainerAwareTrait;

    /**
     * MUVideoModule constructor.
     *
     * @param integer      $objectId  Identifier of treated object
     * @param integer      $areaId    Name of hook area
     * @param string       $module    Name of the owning module
     * @param string       $urlString **deprecated**
     * @param UrlInterface $urlObject Object carrying url arguments
     */
    function __construct($objectId, $areaId, $module, $urlString = null, UrlInterface $urlObject = null)
    {
        // call base constructor to store arguments in member vars
        parent::__construct($objectId, $areaId, $module, $urlString, $urlObject);
    
        // derive object type from url object
        $urlArgs = $urlObject->getArgs();
        $objectType = isset($urlArgs['ot']) ? $urlArgs['ot'] : 'collection';
    
        $this->setContainer(\ServiceUtil::getManager());
    
        $permissionApi = $this->container->get('zikula_permissions_module.api.permission');
        $component = $module . ':' . ucfirst($objectType) . ':';
        $perm = $permissionApi->hasPermission($component, $objectId . '::', ACCESS_READ);
        if (!$perm) {
            return;
        }
    
        $repository = $this->container->get('mu_video_module.entity_factory')->getRepository($objectType);
        $useJoins = false;
    
        $entity = $repository->selectById($objectId, $useJoins);
        if (null === $entity) {
            return;
        }
    
        $this->setObjectTitle($entity->getTitleFromDisplayPattern());
    
        $dateFieldName = $repository->getStartDateFieldName();
        if ($dateFieldName != '') {
            $this->setObjectDate($entity[$dateFieldName]);
        } else {
            $this->setObjectDate('');
        }
    
        if (method_exists($entity, 'getCreatedBy')) {
            $this->setObjectAuthor($entity->getCreatedBy()->getUname());
        } else {
            $this->setObjectAuthor('');
        }
    }
    
    /**
     * Sets the object title.
     *
     * @param string $title
     */
    public function setObjectTitle($title)
    {
        $this->title = $title;
    }
    
    /**
     * Sets the object date.
     *
     * @param DateTime|string $date
     */
    public function setObjectDate($date)
    {
        if ($date instanceof DateTime) {
            $formatter = new IntlDateFormatter();
            $this->date = $formatter->format($date->getTimestamp());
    	} else {
            $this->date = $date;
        }
    }
    
    /**
     * Sets the object author.
     *
     * @param string $author
     */
    public function setObjectAuthor($author)
    {
        $this->author = $author;
    }
}
